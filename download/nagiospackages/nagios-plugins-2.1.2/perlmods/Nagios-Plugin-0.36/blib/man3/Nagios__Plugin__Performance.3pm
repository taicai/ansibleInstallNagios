.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Nagios::Plugin::Performance 3"
.TH Nagios::Plugin::Performance 3 "2010-12-03" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Nagios::Plugin::Performance \- class for handling Nagios::Plugin
performance data.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Nagios::Plugin::Performance use_die => 1;
\&
\&  # Constructor (also accepts a \*(Aqthreshold\*(Aq obj instead of warning/critical)
\&  $p = Nagios::Plugin::Performance\->new(
\&      label     => \*(Aqsize\*(Aq,
\&      value     => $value,
\&      uom       => "kB",
\&      warning   => $warning,
\&      critical  => $critical,
\&      min       => $min,
\&      max       => $max,
\&  );
\&
\&  # Parser
\&  @perf = Nagios::Plugin::Performance\->parse_perfstring(
\&      "/=382MB;15264;15269;; /var=218MB;9443;9448"
\&  ) 
\&  or warn("Failed to parse perfstring");
\&
\&  # Accessors
\&  for $p (@perf) {
\&    printf "label:    %s\en",   $p\->label;
\&    printf "value:    %s\en",   $p\->value;
\&    printf "uom:      %s\en",   $p\->uom;
\&    printf "warning:  %s\en",   $p\->warning;
\&    printf "critical: %s\en",   $p\->critical;
\&    printf "min:      %s\en",   $p\->min;
\&    printf "max:      %s\en",   $p\->max;
\&    # Special accessor returning a threshold obj containing warning/critical
\&    $threshold = $p\->threshold;
\&  }
\&
\&  # Perfdata output format i.e. label=value[uom];[warn];[crit];[min];[max]
\&  print $p\->perfoutput;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Nagios::Plugin class for handling performance data. This is a public 
interface because it could be used by performance graphing routines, 
such as nagiostat (http://nagiostat.sourceforge.net), perfparse 
(http://perfparse.sourceforge.net), nagiosgraph 
(http://nagiosgraph.sourceforge.net) or NagiosGrapher 
(http://www.nagiosexchange.org/NagiosGrapher.84.0.html).
.PP
Nagios::Plugin::Performance offers both a parsing interface (via 
parse_perfstring), for turning nagios performance output strings into
their components, and a composition interface (via new), for turning
components into perfdata strings.
.SH "USE'ING THE MODULE"
.IX Header "USE'ING THE MODULE"
If you are using this module for the purposes of parsing perf data, you
will probably want to set use_die => 1 at use time. This forces
&Nagios::Plugin::Functions::nagios_exit to call \fIdie()\fR \- rather than \fIexit()\fR \-
when an error occurs. This is then trappable by an eval. If you don't set use_die,
then an error in these modules will cause your script to exit
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.IP "Nagios::Plugin::Performance\->new(%attributes)" 4
.IX Item "Nagios::Plugin::Performance->new(%attributes)"
Instantiates a new Nagios::Plugin::Performance object with the given 
attributes.
.IP "Nagios::Plugin::Performance\->parse_perfstring($string)" 4
.IX Item "Nagios::Plugin::Performance->parse_perfstring($string)"
Returns an array of Nagios::Plugin::Performance objects based on the string 
entered. If there is an error parsing the string \- which may consists of several
sets of data \-  will return an array with all the successfully parsed sets.
.Sp
If values are input with commas instead of periods, due to different locale settings,
then it will still be parsed, but the commas will be converted to periods.
.SH "OBJECT METHODS (ACCESSORS)"
.IX Header "OBJECT METHODS (ACCESSORS)"
.IP "label, value, uom, warning, critical, min, max" 4
.IX Item "label, value, uom, warning, critical, min, max"
These all return scalars. min and max are not well supported yet.
.IP "threshold" 4
.IX Item "threshold"
Returns a Nagios::Plugin::Threshold object holding the warning and critical 
ranges for this performance data (if any).
.IP "rrdlabel" 4
.IX Item "rrdlabel"
Returns a string based on 'label' that is suitable for use as dataset name of 
an \s-1RRD\s0 i.e. munges label to be 1\-19 characters long with only characters 
[a\-zA\-Z0\-9_].
.Sp
This calls \f(CW$self\fR\->clean_label and then truncates to 19 characters.
.Sp
There is no guarantee that multiple N:P:Performance objects will have unique 
rrdlabels.
.IP "clean_label" 4
.IX Item "clean_label"
Returns a \*(L"clean\*(R" label for use as a dataset name in \s-1RRD,\s0 ie, it converts
characters that are not [a\-zA\-Z0\-9_] to _.
.Sp
It also converts \*(L"/\*(R" to \*(L"root\*(R" and \*(L"/{name}\*(R" to \*(L"{name}\*(R".
.IP "perfoutput" 4
.IX Item "perfoutput"
Outputs the data in Nagios::Plugin perfdata format i.e. 
label=value[uom];[warn];[crit];[min];[max].
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Nagios::Plugin, Nagios::Plugin::Threshold, http://nagiosplug.sourceforge.net.
.SH "AUTHOR"
.IX Header "AUTHOR"
This code is maintained by the Nagios Plugin Development Team: see
http://nagiosplug.sourceforge.net.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006\-2007 Nagios Plugin Development Team
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
