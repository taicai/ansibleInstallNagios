.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Nagios::Plugin::Getopt 3"
.TH Nagios::Plugin::Getopt 3 "2010-12-03" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Nagios::Plugin::Getopt \- OO perl module providing standardised argument 
processing for Nagios plugins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Nagios::Plugin::Getopt;
\&
\&  # Instantiate object (usage is mandatory)
\&  $ng = Nagios::Plugin::Getopt\->new(
\&    usage => "Usage: %s \-H <host> \-w <warning> \-c <critical>",
\&    version => \*(Aq0.1\*(Aq,
\&    url => \*(Aqhttp://www.openfusion.com.au/labs/nagios/\*(Aq,
\&    blurb => \*(AqThis plugin tests various stuff.\*(Aq, 
\&  );
\&
\&  # Add argument \- named parameters (spec and help are mandatory)
\&  $ng\->arg(
\&    spec => \*(Aqcritical|c=i\*(Aq,
\&    help => q(Exit with CRITICAL status if fewer than INTEGER foobars are free),
\&    required => 1,
\&    default => 10,
\&  );
\&
\&  # Add argument \- positional parameters \- arg spec, help text, 
\&  #   default value, required? (first two mandatory)
\&  $ng\->arg(
\&    \*(Aqwarning|w=i\*(Aq,
\&    q(Exit with WARNING status if fewer than INTEGER foobars are free),
\&    5,
\&    1);
\&
\&  # Parse arguments and process standard ones (e.g. usage, help, version)
\&  $ng\->getopts;
\&
\&  # Access arguments using named accessors or or via the generic get()
\&  print $ng\->warning;
\&  print $ng\->get(\*(Aqcritical\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Nagios::Plugin::Getopt is an \s-1OO\s0 perl module providing standardised and 
simplified argument processing for Nagios plugins. It implements 
a number of standard arguments itself (\-\-help, \-\-version, 
\&\-\-usage, \-\-timeout, \-\-verbose, and their short form counterparts), 
produces standardised nagios plugin help output, and allows 
additional arguments to be easily defined.
.SS "\s-1CONSTRUCTOR\s0"
.IX Subsection "CONSTRUCTOR"
.Vb 5
\&  # Instantiate object (usage is mandatory)
\&  $ng = Nagios::Plugin::Getopt\->new(
\&    usage => \*(AqUsage: %s \-\-hello\*(Aq,
\&    version => \*(Aq0.01\*(Aq,
\&  );
.Ve
.PP
The Nagios::Plugin::Getopt constructor accepts the following named 
arguments:
.IP "usage (required)" 4
.IX Item "usage (required)"
Short usage message used with \-\-usage/\-? and with missing required
arguments, and included in the longer \-\-help output. Can include
a '%s' sprintf placeholder which will be replaced with the plugin
name e.g.
.Sp
.Vb 1
\&  usage => qq(Usage: %s \-H <hostname> \-p <ports> [\-v]),
.Ve
.Sp
might be displayed as:
.Sp
.Vb 2
\&  $ ./check_tcp_range \-\-usage
\&  Usage: check_tcp_range \-H <hostname> \-p <ports> [\-v]
.Ve
.IP "version (required)" 4
.IX Item "version (required)"
Plugin version number, included in the \-\-version/\-V output, and in
the longer \-\-help output. e.g.
.Sp
.Vb 2
\&  $ ./check_tcp_range \-\-version
\&  check_tcp_range 0.2 [http://www.openfusion.com.au/labs/nagios/]
.Ve
.IP "url" 4
.IX Item "url"
\&\s-1URL\s0 for info about this plugin, included in the \-\-version/\-V output, 
and in the longer \-\-help output (see preceding 'version' example).
.IP "blurb" 4
.IX Item "blurb"
Short plugin description, included in the longer \-\-help output
(see below for an example).
.IP "license" 4
.IX Item "license"
License text, included in the longer \-\-help output (see below for an 
example). By default, this is set to the standard nagios plugins
\&\s-1GPL\s0 license text:
.Sp
.Vb 4
\&  This nagios plugin is free software, and comes with ABSOLUTELY 
\&  NO WARRANTY. It may be used, redistributed and/or modified under 
\&  the terms of the GNU General Public Licence (see 
\&  http://www.fsf.org/licensing/licenses/gpl.txt).
.Ve
.Sp
Provide your own to replace this text in the help output.
.IP "extra" 4
.IX Item "extra"
Extra text to be appended at the end of the longer \-\-help output.
.IP "plugin" 4
.IX Item "plugin"
Plugin name. This defaults to the basename of your plugin, which is
usually correct, but you can set it explicitly if not.
.IP "timeout" 4
.IX Item "timeout"
Timeout period in seconds, overriding the standard timeout default 
(15 seconds).
.PP
The full \-\-help output has the following form:
.PP
.Vb 1
\&  version string
\&
\&  license string
\&
\&  blurb
\&
\&  usage string
\&
\&  options list
\&
\&  extra text
.Ve
.PP
The 'blurb' and 'extra text' sections are omitted if not supplied. For
example:
.PP
.Vb 2
\&  $ ./check_tcp_range \-h
\&  check_tcp_range 0.2 [http://www.openfusion.com.au/labs/nagios/]
\&
\&  This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY. 
\&  It may be used, redistributed and/or modified under the terms of the GNU 
\&  General Public Licence (see http://www.fsf.org/licensing/licenses/gpl.txt).
\&
\&  This plugin tests arbitrary ranges/sets of tcp ports for a host.
\&
\&  Usage: check_tcp_range \-H <hostname> \-p <ports> [\-v]
\&
\&  Options:
\&   \-h, \-\-help
\&     Print detailed help screen
\&   \-V, \-\-version
\&     Print version information
\&   \-H, \-\-hostname=ADDRESS
\&     Host name or IP address
\&   \-p, \-\-ports=STRING
\&     Port numbers to check. Format: comma\-separated, colons for ranges,
\&     no spaces e.g. 8700:8705,8710:8715,8760 
\&   \-t, \-\-timeout=INTEGER
\&     Seconds before plugin times out (default: 15)
\&   \-v, \-\-verbose
\&     Show details for command\-line debugging (can repeat up to 3 times)
.Ve
.SS "\s-1ARGUMENTS\s0"
.IX Subsection "ARGUMENTS"
You can define arguments for your plugin using the \fIarg()\fR method, which 
supports both named and positional arguments. In both cases
the \f(CW\*(C`spec\*(C'\fR and \f(CW\*(C`help\*(C'\fR arguments are required, while the \f(CW\*(C`label\*(C'\fR, 
\&\f(CW\*(C`default\*(C'\fR, and \f(CW\*(C`required\*(C'\fR arguments are optional:
.PP
.Vb 6
\&  # Define \-\-hello argument (named parameters)
\&  $ng\->arg(
\&    spec => \*(Aqhello|h=s\*(Aq, 
\&    help => "Hello string",
\&    required => 1,
\&  );
\&
\&  # Define \-\-hello argument (positional parameters)
\&  #   Parameter order is \*(Aqspec\*(Aq, \*(Aqhelp\*(Aq, \*(Aqdefault\*(Aq, \*(Aqrequired?\*(Aq, \*(Aqlabel\*(Aq
\&  $ng\->arg(\*(Aqhello|h=s\*(Aq, "Hello parameter (default %s)", 5, 1);
.Ve
.IP "spec" 4
.IX Item "spec"
The \f(CW\*(C`spec\*(C'\fR argument (the first argument in the positional variant) is a
Getopt::Long argument specification. See Getopt::Long for the details,
but basically it is a series of one or more argument names for this argument
(separated by '|'), suffixed with an '=<type>' indicator if the argument
takes a value. '=s' indicates a string argument; '=i' indicates an integer
argument; appending an '@' indicates multiple such arguments are accepted;
and so on. The following are some examples:
.RS 4
.IP "hello=s" 4
.IX Item "hello=s"
.PD 0
.IP "hello|h=s" 4
.IX Item "hello|h=s"
.IP "ports|port|p=i" 4
.IX Item "ports|port|p=i"
.IP "exclude|X=s@" 4
.IX Item "exclude|X=s@"
.IP "verbose|v+" 4
.IX Item "verbose|v+"
.RE
.RS 4
.RE
.IP "help" 4
.IX Item "help"
.PD
The \f(CW\*(C`help\*(C'\fR argument is a string displayed in the \-\-help option list output,
or it can be a list (an arrayref) of such strings, for multi-line help (see
below).
.Sp
The help string is munged in two ways:
.RS 4
.IP "\(bu" 4
First, if the help string does \s-1NOT\s0 begins with a '\-' sign, it is prefixed 
by an expanded form of the \f(CW\*(C`spec\*(C'\fR argument. For instance, the following 
hello argument:
.Sp
.Vb 4
\&  $ng\->arg(
\&    spec => \*(Aqhello|h=s\*(Aq, 
\&    help => "Hello string",
\&  );
.Ve
.Sp
would be displayed in the help output as:
.Sp
.Vb 2
\&  \-h, \-\-hello=STRING
\&    Hello string
.Ve
.Sp
where the '\-h, \-\-hello=STRING' part is derived from the spec definition
(by convention with short args first, then long, then label/type, if any).
.IP "\(bu" 4
Second, if the string contains a '%s' it will be formatted via 
\&\f(CW\*(C`sprintf\*(C'\fR with the 'default' as the argument i.e.
.Sp
.Vb 1
\&  sprintf($help, $default)
.Ve
.RE
.RS 4
.Sp
Multi-line help is useful in cases where an argument can be of different types
and you want to make this explicit in your help output e.g.
.Sp
.Vb 8
\&  $ng\->arg(
\&    spec => \*(Aqwarning|w=s\*(Aq,
\&    help => [
\&      \*(AqExit with WARNING status if less than BYTES bytes of disk are free\*(Aq,
\&      \*(AqExit with WARNING status if less than PERCENT of disk is free\*(Aq,
\&    ],
\&    label => [ \*(AqBYTES\*(Aq, \*(AqPERCENT%\*(Aq ],
\&  );
.Ve
.Sp
would be displayed in the help output as:
.Sp
.Vb 4
\& \-w, \-\-warning=BYTES
\&    Exit with WARNING status if less than BYTES bytes of disk are free
\& \-w, \-\-warning=PERCENT%
\&    Exit with WARNING status if less than PERCENT of disk space is free
.Ve
.Sp
Note that in this case we've also specified explicit labels in another
arrayref corresponding to the \f(CW\*(C`help\*(C'\fR one \- if this had been omitted 
the types would have defaulted to '\s-1STRING\s0', instead of '\s-1BYTES\s0' and 
\&'PERCENT%'.
.RE
.IP "label" 4
.IX Item "label"
The \f(CW\*(C`label\*(C'\fR argument is a scalar or an arrayref (see 'Multi\-line help' 
description above) that overrides the standard type expansion when generating
help text from the spec definition. By default, \f(CW\*(C`spec=i\*(C'\fR arguments are 
labelled as \f(CW\*(C`=INTEGER\*(C'\fR in the help text, and \f(CW\*(C`spec=s\*(C'\fR arguments are labelled 
as \f(CW\*(C`=STRING\*(C'\fR. By supplying your own \f(CW\*(C`label\*(C'\fR argument you can override these 
standard '\s-1INTEGER\s0' and '\s-1STRING\s0' designations.
.Sp
For multi-line help, you can supply an ordered list (arrayref) of labels to
match the list of help strings e.g.
.Sp
.Vb 1
\&  label => [ \*(AqBYTES\*(Aq, \*(AqPERCENT%\*(Aq ]
.Ve
.Sp
Any labels that are left as undef (or just omitted, if trailing) will just
use the default '\s-1INTEGER\s0' or '\s-1STRING\s0' designations e.g.
.Sp
.Vb 1
\&  label => [ undef, \*(AqPERCENT%\*(Aq ]
.Ve
.IP "default" 4
.IX Item "default"
The \f(CW\*(C`default\*(C'\fR argument is the default value to be given to this parameter
if none is explicitly supplied.
.IP "required" 4
.IX Item "required"
The \f(CW\*(C`required\*(C'\fR argument is a boolean used to indicate that this argument 
is mandatory (Nagios::Plugin::Getopt will exit with your usage message and 
a 'Missing argument' indicator if any required arguments are not supplied).
.PP
Note that \-\-help lists your arguments in the order they are defined, so 
you should order your \f(CW\*(C`arg()\*(C'\fR calls accordingly.
.SS "\s-1GETOPTS\s0"
.IX Subsection "GETOPTS"
The main parsing and processing functionality is provided by the \fIgetopts()\fR
method, which takes no arguments:
.PP
.Vb 2
\&  # Parse and process arguments
\&  $ng\->getopts;
.Ve
.PP
This parses the command line arguments passed to your plugin using
Getopt::Long and the builtin and provided argument specifications.
Flags and argument values are recorded within the object, and can 
be accessed either using the generic \fIget()\fR accessor, or using named
accessors corresponding to your argument names. For example:
.PP
.Vb 2
\&  print $ng\->get(\*(Aqhello\*(Aq);
\&  print $ng\->hello();
\&
\&  if ($ng\->verbose) {
\&    # ...
\&  }
\&
\&  if ($ng\->get(\*(Aqports\*(Aq) =~ m/:/) {
\&    # ...
\&  }
.Ve
.PP
Note that where you have defined alternate argument names, the first is 
considered the citation form. All the builtin arguments are available 
using their long variant names.
.SS "\s-1BUILTIN PROCESSING\s0"
.IX Subsection "BUILTIN PROCESSING"
The \f(CW\*(C`getopts()\*(C'\fR method also handles processing of the immediate builtin 
arguments, namely \-\-usage, \-\-version, \-\-help, as well as checking all
required arguments have been supplied, so you don't have to handle
those yourself. This means that your plugin will exit from the \fIgetopts()\fR
call in these cases \- if you want to catch that you can run \fIgetopts()\fR
within an eval{}.
.PP
\&\f(CW\*(C`getopts()\*(C'\fR also sets up a default \s-1ALRM\s0 timeout handler so you can use an
.PP
.Vb 1
\&  alarm $ng\->timeout;
.Ve
.PP
around any blocking operations within your plugin (which you are free 
to override if you want to use a custom timeout message).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Nagios::Plugin, Getopt::Long
.SH "AUTHOR"
.IX Header "AUTHOR"
Gavin Carr <gavin@openfusion.com.au>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006\-2007 by the Nagios Plugin Development Team.
.PP
This module is free software. It may be used, redistributed
and/or modified under either the terms of the Perl Artistic 
License (see http://www.perl.com/perl/misc/Artistic.html)
or the \s-1GNU\s0 General Public Licence (see 
http://www.fsf.org/licensing/licenses/gpl.txt).
