#!/usr/bin/perl -w
#
# check_linux_memory - Check used memory locally on Linux systems
#
# Copyright (C) 2011 Oskar Liljeblad
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Run check_snmp_if --help for usage information.
# Written by Oskar Liljeblad <oskar@osk.mine.nu>.
#

require 5.10.0;
use strict;
use Getopt::Long;
use List::Util qw(max);
use Nagios::Plugin;
use Nagios::Plugin::Threshold;

my $PROGRAM = 'check_linux_memory';
my $VERSION = '0.2';

my $plugin = Nagios::Plugin->new(shortname => $PROGRAM);
my %opt;
Getopt::Long::config('bundling');
Getopt::Long::GetOptions(\%opt, 'warning|w=s', 'critical|c=s', 'swap-optional|s', 'no-perfdata|n', 'help', 'version') || exit UNKNOWN;

if (defined $opt{'help'}) {
  print <<"__END__";
Usage: $PROGRAM [OPTION]...
Check used memory locally on Linux systems.

  -w, --warning=MEMORY[,SWAP]   warning threshold for percent used memory
  -c, --critical=MEMORY[,SWAP]  critical threshold for percent used memory
  -n, --no-perfdata             do not print any performance data
  -s, --swap-optional           swap is not required
      --help                    display this help and exit
      --version                 output version information and exit    

Thresholds follow the usual Nagios format:
  Value                  Okay if
  95                     0 <= x <= 95
  95:                    x >= 95
  ~:95                   x <= 95
  50:95                  50 <= x <= 95
  \@50:95                 x < 50 or x > 95

Report $PROGRAM bugs to <oskar\@osk.mine.nu>.
__END__
  exit;
}    
if (defined $opt{'version'}) {
  print "$PROGRAM $VERSION\n";
  print "Copyright (C) 2011 Oskar Liljeblad\n";
  print "License AGPLv3+: GNU Affero GPL version 3 or later <http://gnu.org/licenses/agpl.html>.\n";
  print "This is free software: you are free to change and redistribute it.\n";
  print "There is NO WARRANTY, to the extent permitted by law.\n";
  print "\nWritten by Oskar Liljeblad.\n";
  exit;
}

my @warns = split(/,/, $opt{'warning'} // '');
my @crits = split(/,/, $opt{'critical'} // '');
foreach (@warns, @crits) {
  $plugin->nagios_exit(UNKNOWN, "invalid threshold `$_'\n") if !/^(\d+|\d+:|~:\d+|\d+:\d+|@\d+:\d+)?$/;
}
my $mempct_threshold = Nagios::Plugin::Threshold->set_thresholds(warning => ($warns[0] // ''), critical => ($crits[0] // ''));
my $swappct_threshold = Nagios::Plugin::Threshold->set_thresholds(warning => ($warns[1] // ''), critical => ($crits[1] // ''));

my ($memtotal, $memavail, $swaptotal, $swapavail);
my $file = '/proc/meminfo';
open(my $fh, '<', $file) || $plugin->nagios_exit(UNKNOWN, "cannot open $file - $!\n");
while (<$fh>) {
  $memtotal = $1*1024 if /^MemTotal:\s+(\d+) kB/;
  $memavail += $1*1024 if /^(?:MemFree|Buffers|Cached):\s+(\d+) kB/;
  $swaptotal = $1*1024 if /^SwapTotal:\s+(\d+) kB/;
  $swapavail += $1*1024 if /^SwapFree:\s+(\d+) kB/;
}
close $fh;
$plugin->nagios_exit(UNKNOWN, "missing information in $file") if (grep { !defined } $memtotal, $memavail, $swaptotal, $swapavail) || $memtotal == 0;

my $memused = $memtotal - $memavail;
my $memusedpct = int($memused/$memtotal * 100 + 0.5);
my $swapused = $swaptotal - $swapavail;
my $swapusedpct = $swaptotal == 0 ? 0 : int($swapused/$swaptotal * 100 + 0.5);

if (!$opt{'no-perfdata'}) {
  my $membyte_threshold = Nagios::Plugin::Threshold->set_thresholds(
    warning => convert_percent_range($mempct_threshold->{'warning'}, $memtotal),
    critical => convert_percent_range($mempct_threshold->{'critical'}, $memtotal));
  $plugin->add_perfdata(label => 'memused', value => $memused, uom => 'B', min => 0, max => $memtotal, threshold => $membyte_threshold);
  $plugin->add_perfdata(label => 'memused%', value => $memusedpct, uom => '%', min => 0, max => 100, threshold => $mempct_threshold);
  my $swapbyte_threshold = Nagios::Plugin::Threshold->set_thresholds(
    warning => convert_percent_range($swappct_threshold->{'warning'}, $swaptotal),
    critical => convert_percent_range($swappct_threshold->{'critical'}, $swaptotal));
  $plugin->add_perfdata(label => 'swapused', value => $swapused, uom => 'B', min => 0, max => $swaptotal, threshold => $swapbyte_threshold);
  $plugin->add_perfdata(label => 'swapused%', value => $swapusedpct, uom => '%', min => 0, max => 100, threshold => $swappct_threshold);
}
my @reports;
push @reports, [
  $mempct_threshold->get_status($memusedpct),
  sprintf('Memory used: %s/%s (%u%%)', human_readable_integer($memused), human_readable_integer($memtotal), $memusedpct)
];
push @reports, [
  $swappct_threshold->get_status($swapusedpct),
  sprintf('Swap used: %s/%s (%u%%)', human_readable_integer($swapused), human_readable_integer($swaptotal), $swapusedpct)
] if $swaptotal != 0;
push @reports, [
  CRITICAL,
  "No swap active"
] if $swaptotal == 0 && !$opt{'swap-optional'};

my $status = max map { $_->[0] } @reports;
my @report_critical = map { $_->[1] } grep { $_->[0] == CRITICAL } @reports;
my @report_warning = map { $_->[1] } grep { $_->[0] == WARNING } @reports;
my @report_normal = map { $_->[1] } grep { $_->[0] == OK } @reports;
my $report;
if ($status == CRITICAL) {
  $report = join(', ', @report_critical);
  $report .= ', WARNING: '.join(', ', @report_warning) if @report_warning;
  $report .= ', OK: '.join(', ', @report_normal) if @report_normal;
} elsif ($status == WARNING) {
  $report = join(', ', @report_warning);
  $report .= ', OK: '.join(', ', @report_normal) if @report_normal;
} elsif ($status == OK) {
  $report = join(', ', @report_normal);
}
$plugin->nagios_exit($status, $report);

sub human_readable_integer {
  my ($i) = @_;
  my $c;
  for ($c = 0; $i >= 1024**($c+1); $c++) {}
  my @u = qw(k M G T P E Z Y);
  return $i if $c == 0;
  return int(($i + 1024**$c - 1) / 1024**$c) . $u[$c-1] if length(int(($i + 1024**$c - 1)/ 1024**$c)) > 2;
  return sprintf('%.1f', $i / 1024**$c) . $u[$c-1];
}

sub convert_percent_range {
  my ($range, $max) = @_;
  if ($range =~ /^\D*(\d+)\D*$/) {
    my $value = int($1*$max/100 + 0.5);
    $range =~ s/(\d+)/$value/;
  } elsif ($range =~ /^\D*(\d+)\D+(\d+)\D*$/) {
    my ($value1, $value2) = map { int($_*$max/100 + 0.5) } ($1, $2);
    $range =~ s/(\d+)(\D+)(\d+)/$value1$2$value2/;
  }
  return $range;
}
