#!/usr/bin/perl -w
#
# check_snmp_cisco_cpu - Check CPU utilization on Cisco devices
#
# Copyright (C) 2011 Oskar Liljeblad
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Run check_snmp_cisco_cpu --help for usage information.
# Written by Oskar Liljeblad <oskar@osk.mine.nu>.
#

require 5.10.0;
use strict;
use Net::SNMP;
use List::Util qw(min max sum);
use Getopt::Long;
use Nagios::Plugin;
use Nagios::Plugin::Threshold;

my $PROGRAM = 'check_snmp_cisco_cpu';
my $VERSION = '0.0+git';

my $plugin = Nagios::Plugin->new(shortname => $PROGRAM);
my %opt = (
  'snmp-version' => 1,
  'timeout' => 30,
  'verbose' => 0,
  'warning' => '',
  'critical' => '',
  'aggregate' => 'avg',	
  'perfdata' => 'aggregate',
);
Getopt::Long::config('bundling');
Getopt::Long::GetOptions(\%opt,
  'host|H=s', 'timeout|t=i', 'community|C=s', 'snmp-version|V=s',
  'auth-username=s', 'auth-password=s', 'priv-password=s',
  'auth-protocol=s', 'priv-protocol=s', 'port=i', 'snmp-message-size=i',
  'local-address=s', 'local-port=s', 'no-perfdata|n', 'perfdata|p=s',
  'verbose|v+', 'warning|w=s', 'critical|c=s',
  'aggregate=s',
  'help', 'version'
) || exit UNKNOWN;

if (defined $opt{'help'}) {
  print <<"__END__";
Usage: $PROGRAM -H ADDRESS [OPTION]...
Check CPU utilization on Cisco devices via SNMP (CISCO-PROCESS-MIB).

General options:
  -H, --host=ADDRESS               address or name of host to check
  -v, --verbose                    explain what is being done
  -w, --warning=THRESHOLDS         warning threshold for utilization
  -c, --critical=THRESHOLDS        critical threshold for utilization
      --aggregate=min|max|avg|med  aggregation function for multiple CPUs
  -n, --no-perfdata                do not print any performance data
  -p, --perfdata=PERFITEMS         generate different performance data
      --help                       display this help and exit
      --version                    output version information and exit

SNMP options:
  -V, --snmp-version=VERSION       SNMP version (1, 2c, 3), default is 1
  -t, --timeout=SECONDS            max time for individual SNMP requests
      --port=NUMBER                SNMP port (if other than 161)
      --local-address=ADDRESS      local address for outgoing packets
      --local-port=NUMBER          local port for outgoing packets
  -C, --community=NAME             SNMP community
      --auth-username=USER         authentication username (SNMPv3)
      --auth-password=PASSWORD     authentication password (SNMPv3)
      --auth-protocol=md5|sha      authentication protocol (SNMPv3)
      --priv-password=PASSWORD     encryption password (SNMPv3)
      --priv-protocol=des|aes      encryption protocol (SNMPv3)
      --snmp-message-size=BYTES    max size of SNMP request packets

By default, multiple processor utilizations are averaged into one
utilization value, and that value is reported and checked against the
thresholds. You can change the aggregation function using `--aggregate'.

Threshold specifications are in the format `[[5sec,]1min,]5min', where
each part of the threshold follows the usual Nagios format:
  Value                  Okay if
  95                     0 <= x <= 95
  95:                    x >= 95
  ~:95                   x <= 95
  50:95                  50 <= x <= 95
  \@50:95                 x < 50 or x > 95

Threshold examples:
  Specification          Okay if
  70,80,90               5sec <= 70%, 1min <= 80%, and 5min <= 90%
  75,95                  1min <= 75%, and 5min <= 95%
  87                     5min <= 87%

By default, performance data is generated for aggregated utilization
values (--perfdata=aggregate).  You can instead generate performance data
for individual values using --perfdata=individual. If you want both, you
can combine them with a comma.

Examples:
  $PROGRAM -H myhost -C mycommunity -w 70,80,90 -c 85,90,95

Report $PROGRAM bugs to <oskar\@osk.mine.nu>.
__END__
  exit;
}
if (defined $opt{'version'}) {
  print "$PROGRAM $VERSION\n";
  print "Copyright (C) 2011 Oskar Liljeblad\n";
  print "License AGPLv3+: GNU Affero GPL version 3 or later <http://gnu.org/licenses/agpl.html>.\n";
  print "This is free software: you are free to change and redistribute it.\n";
  print "There is NO WARRANTY, to the extent permitted by law.\n";
  print "\nWritten by Oskar Liljeblad.\n";
  exit;
}

$plugin->nagios_exit(UNKNOWN, "missing --host/-H parameter\n") if !defined $opt{'host'};
$plugin->nagios_exit(UNKNOWN, "invalid value for --aggregate - `$opt{'aggregate'}\n") if $opt{'aggregate'} !~ /^(avg|average|max|maximum|min|minimum|med|median)$/;
$plugin->nagios_exit(UNKNOWN, "surplus operand\n") if @ARGV;

my %perfdata;
foreach my $item (split(/,/, $opt{'perfdata'})) {
  $plugin->nagios_exit(UNKNOWN, "invalid value for --perfdata - `$item'\n") if $item !~ /^(aggregate|individual)$/;
  $perfdata{$item} = 1;
}

my @thresholds;
my @warning_thresholds = split(/,/, $opt{'warning'});
my @critical_thresholds = split(/,/, $opt{'critical'});
$plugin->nagios_exit(UNKNOWN, "must specify equal number of warning and critical thresholds\n") if @warning_thresholds != @critical_thresholds;
if (@warning_thresholds != 0) {
  for (my $c = 0; $c < @warning_thresholds; $c++) {
    $plugin->nagios_exit(UNKNOWN, "invalid warning threshold `$warning_thresholds[$c]'\n") if $warning_thresholds[$c] !~ /^(\d+|\d+:|~:\d+|\d+:\d+|@\d+:\d+)$/;
    $plugin->nagios_exit(UNKNOWN, "invalid critical threshold `$critical_thresholds[$c]'\n") if $critical_thresholds[$c] !~ /^(\d+|\d+:|~:\d+|\d+:\d+|@\d+:\d+)$/;
    push @thresholds, Nagios::Plugin::Threshold->set_thresholds(warning => $warning_thresholds[$c], critical => $critical_thresholds[$c]);
  }
}

my $retries = 1; # default number of SNMP retries in Net::SNMP
my @session_opts = (
  -hostname => $opt{'host'},
  -version => $opt{'snmp-version'},
  -timeout => int ($opt{'timeout'} / ($retries+1))
);
$opt{'community'} //= 'public' if $opt{'snmp-version'} !~ /^3|snmpv3$/;
push @session_opts, -port => $opt{'port'} if defined $opt{'port'};
push @session_opts, -community => $opt{'community'} if defined $opt{'community'};
push @session_opts, -username => $opt{'username'} if defined $opt{'username'};
push @session_opts, -authpassword => $opt{'auth-password'} if defined $opt{'auth-password'};
push @session_opts, -privpassword => $opt{'priv-password'} if defined $opt{'priv-password'};
push @session_opts, -authprotocol => $opt{'auth-protocol'} if defined $opt{'auth-protocol'};
push @session_opts, -privprotocol => $opt{'priv-protocol'} if defined $opt{'priv-protocol'};
push @session_opts, -maxmsgsize => $opt{'snmp-message-size'} if defined $opt{'snmp-message-size'};
push @session_opts, -localaddr => $opt{'localaddr'} if defined $opt{'localaddr'};
push @session_opts, -localport => $opt{'localport'} if defined $opt{'localport'};
my ($session, $error) = Net::SNMP->session(@session_opts);
$plugin->nagios_exit(UNKNOWN, "cannot open SNMP session: $error\n") if !defined $session;

my $baseoid = '1.3.6.1.4.1.9.9.109.1.1.1.1'; # cpmCPUTotalEntry in CISCO-PROCESS-MIB
my $result = $session->get_table($baseoid);
$plugin->nagios_exit(UNKNOWN, "cannot get cpu entry table (CISCO-PROCESS-MIB::cpmCPUTotalEntry): ".$session->error."\n") if !defined $result;

my $processors = 1;
$processors++ while exists $result->{"$baseoid.3.$processors"};
$processors--;
$plugin->nagios_exit(CRITICAL, "no processor statistics found\n") if $processors == 0;

my @reports;

my @values1 = get_values("$baseoid.6", "$baseoid.3");
my $value1 = calculate_aggregate($opt{'aggregate'}, @values1);
my $status1 = @thresholds >= 3 ? $thresholds[-3]->get_status($value1) : OK;
push @reports, [ $status1, "5sec $value1\%" ];
add_perfdata('cpu_5sec', $value1, '%', 0, 100, @thresholds >= 3 ? $thresholds[-3] : undef) if $perfdata{'aggregate'};
if ($perfdata{'individual'}) {
  add_perfdata('cpu'.$_.'_5sec', $values1[$_-1], '%', 0, 100) for 1..@values1;
}

my @values2 = get_values("$baseoid.7", "$baseoid.4");
my $value2 = calculate_aggregate($opt{'aggregate'}, @values2);
my $status2 = @thresholds >= 2 ? $thresholds[-2]->get_status($value2) : OK;
push @reports, [ $status2, "1min $value2\%" ];
add_perfdata('cpu_1min', $value2, '%', 0, 100, @thresholds >= 2 ? $thresholds[-2] : undef) if $perfdata{'aggregate'};
if ($perfdata{'individual'}) {
  add_perfdata('cpu'.$_.'_1min', $values2[$_-1], '%', 0, 100) for 1..@values2;
}

my @values3 = get_values("$baseoid.8", "$baseoid.5");
my $value3 = calculate_aggregate($opt{'aggregate'}, @values3);
my $status3 = @thresholds >= 1 ? $thresholds[-1]->get_status($value3) : OK;
push @reports, [ $status3, "5min $value3\%" ];
add_perfdata('cpu_5min', $value3, '%', 0, 100, @thresholds >= 1 ? $thresholds[-1] : undef) if $perfdata{'aggregate'};
if ($perfdata{'individual'}) {
  add_perfdata('cpu'.$_.'_5min', $values2[$_-1], '%', 0, 100) for 1..@values3;
}

push @reports, [ OK, $processors.' '.noun($processors, 'processor', 'processors') ];
push @reports, [ OK, format_aggregate($opt{'aggregate'})." aggregation" ] if $processors > 1;
#add_perfdata('processors', $processors, '', 0);

my $status = max(OK, $status1, $status2, $status3);
my $report = "CPU utilization ";
my @report_critical = map { $_->[1] } grep { $_->[0] == CRITICAL } @reports;
my @report_warning = map { $_->[1] } grep { $_->[0] == WARNING } @reports;
my @report_normal = map { $_->[1] } grep { $_->[0] == OK } @reports;
if ($status == CRITICAL) {
  $report .= join(', ', @report_critical);
  $report .= ', WARNING: '.join(', ', @report_warning) if @report_warning;
  $report .= ', OK: '.join(', ', @report_normal) if @report_normal;
} elsif ($status == WARNING) {
  $report .= join(', ', @report_warning);
  $report .= ', OK: '.join(', ', @report_normal) if @report_normal;
} elsif ($status == OK) {
  $report .= join(', ', @report_normal);
}
$plugin->nagios_exit($status, $report);

sub add_perfdata {
  my ($label, $value, $unit, $min, $max, $threshold) = @_;
  if (!defined $opt{'no-perfdata'}) {
    $unit //= '';
    $max //= '';
    $min //= 0;
    if (defined $threshold) {
      $plugin->add_perfdata(label => $label, value => $value, uom => $unit, min => $min, max => $max, threshold => $threshold);
    } else {
      $plugin->add_perfdata(label => $label, value => $value, uom => $unit, min => $min, max => $max);
    }
  }
}

#sub get_result {
#  my ($oid, $re, $field) = @_;
#  my $value = $result->{$oid};
#  $plugin->nagios_exit(UNKNOWN, "missing $field\n") if !defined $value;
#  $plugin->nagios_exit(UNKNOWN, "invalid $field: $value\n") if $value !~ $re;
#  return $value;
#}

sub get_values {
  my ($oid_new, $oid_old) = @_;
  my @values = map { $result->{"$oid_new.$_"} } 1..$processors;
  @values = map { $result->{"$oid_old.$_"} } 1..$processors if grep(defined, @values) != $processors;
  return @values;
}

sub calculate_aggregate {
  my ($mode, @values) = @_;
  return int((sum @values)/@values + 0.5) if $mode eq 'avg' || $mode eq 'average';
  return max @values if $mode eq 'max' || $mode eq 'maximum';
  return min @values if $mode eq 'min' || $mode eq 'minimum';
  if ($mode eq 'med' || $mode eq 'median') {
    @values = sort { $a <=> $b } @values;
    my $mid = int(@values / 2);
    return @values % 2 == 0 ? int(($values[$mid]+$values[$mid+1])/2 + 0.5) : $values[$mid];
  }
  return 0;
}

sub format_aggregate {
  my ($aggregate) = @_;
  return 'average' if $aggregate eq 'avg';
  return 'minimal' if $aggregate eq 'min';
  return 'maximal' if $aggregate eq 'max';
  return 'median' if $aggregate eq 'med';
  return $aggregate;
}

sub noun {
  my ($n,$s,$p) = @_;
  return $n == 1 ? $s : $p;
}
